/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.modes.condition.analysis;

import java.util.Hashtable;

import org.surreal.samgen.modes.condition.node.AAndopBinop;
import org.surreal.samgen.modes.condition.node.ABinaryTerm;
import org.surreal.samgen.modes.condition.node.AComposedCondition;
import org.surreal.samgen.modes.condition.node.AEqOp;
import org.surreal.samgen.modes.condition.node.AGtOp;
import org.surreal.samgen.modes.condition.node.AGteqOp;
import org.surreal.samgen.modes.condition.node.AIdCrval;
import org.surreal.samgen.modes.condition.node.AIdIndex;
import org.surreal.samgen.modes.condition.node.AIdModename;
import org.surreal.samgen.modes.condition.node.AIdProcess;
import org.surreal.samgen.modes.condition.node.ALeftFirst;
import org.surreal.samgen.modes.condition.node.ALtOp;
import org.surreal.samgen.modes.condition.node.ALteqOp;
import org.surreal.samgen.modes.condition.node.AMetaFirst;
import org.surreal.samgen.modes.condition.node.AMetaSecond;
import org.surreal.samgen.modes.condition.node.ANeqOp;
import org.surreal.samgen.modes.condition.node.ANestedTerm;
import org.surreal.samgen.modes.condition.node.ANumNrval;
import org.surreal.samgen.modes.condition.node.ANumRval;
import org.surreal.samgen.modes.condition.node.AOpAtomic;
import org.surreal.samgen.modes.condition.node.AOropBinop;
import org.surreal.samgen.modes.condition.node.ARightSecond;
import org.surreal.samgen.modes.condition.node.ASimpleCondition;
import org.surreal.samgen.modes.condition.node.ASimpleLval;
import org.surreal.samgen.modes.condition.node.ASimpleTerm;
import org.surreal.samgen.modes.condition.node.ASingletonAtomic;
import org.surreal.samgen.modes.condition.node.AStrRval;
import org.surreal.samgen.modes.condition.node.AUnaryTerm;
import org.surreal.samgen.modes.condition.node.EOF;
import org.surreal.samgen.modes.condition.node.InvalidToken;
import org.surreal.samgen.modes.condition.node.Node;
import org.surreal.samgen.modes.condition.node.Start;
import org.surreal.samgen.modes.condition.node.TAnd;
import org.surreal.samgen.modes.condition.node.TDot;
import org.surreal.samgen.modes.condition.node.TEq;
import org.surreal.samgen.modes.condition.node.TGt;
import org.surreal.samgen.modes.condition.node.TGteq;
import org.surreal.samgen.modes.condition.node.TIdentifier;
import org.surreal.samgen.modes.condition.node.TLPar;
import org.surreal.samgen.modes.condition.node.TLt;
import org.surreal.samgen.modes.condition.node.TLteq;
import org.surreal.samgen.modes.condition.node.TNeq;
import org.surreal.samgen.modes.condition.node.TNot;
import org.surreal.samgen.modes.condition.node.TNumber;
import org.surreal.samgen.modes.condition.node.TOpaqueexpr;
import org.surreal.samgen.modes.condition.node.TOr;
import org.surreal.samgen.modes.condition.node.TRPar;
import org.surreal.samgen.modes.condition.node.TSpace;
import org.surreal.samgen.modes.condition.node.TSpaces;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComposedCondition(AComposedCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleCondition(ASimpleCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANestedTerm(ANestedTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryTerm(AUnaryTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleTerm(ASimpleTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryTerm(ABinaryTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndopBinop(AAndopBinop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOropBinop(AOropBinop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeftFirst(ALeftFirst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMetaFirst(AMetaFirst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARightSecond(ARightSecond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMetaSecond(AMetaSecond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpAtomic(AOpAtomic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingletonAtomic(ASingletonAtomic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqOp(ANeqOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqOp(AEqOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqOp(ALteqOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtOp(ALtOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqOp(AGteqOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtOp(AGtOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleLval(ASimpleLval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumRval(ANumRval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrRval(AStrRval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdModename(AIdModename node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdProcess(AIdProcess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdIndex(AIdIndex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumNrval(ANumNrval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdCrval(AIdCrval node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSpaces(TSpaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOpaqueexpr(TOpaqueexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
