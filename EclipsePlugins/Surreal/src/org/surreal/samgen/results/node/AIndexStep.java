/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.results.node;

import org.surreal.samgen.results.analysis.Analysis;

@SuppressWarnings("nls")
public final class AIndexStep extends PStep
{
    private PProcess _process_;
    private TDot _dot_;
    private PIndex _index_;
    private TEq _eq_;
    private PValue _value_;

    public AIndexStep()
    {
        // Constructor
    }

    public AIndexStep(
        @SuppressWarnings("hiding") PProcess _process_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") PIndex _index_,
        @SuppressWarnings("hiding") TEq _eq_,
        @SuppressWarnings("hiding") PValue _value_)
    {
        // Constructor
        setProcess(_process_);

        setDot(_dot_);

        setIndex(_index_);

        setEq(_eq_);

        setValue(_value_);

    }

    @Override
    public Object clone()
    {
        return new AIndexStep(
            cloneNode(this._process_),
            cloneNode(this._dot_),
            cloneNode(this._index_),
            cloneNode(this._eq_),
            cloneNode(this._value_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndexStep(this);
    }

    public PProcess getProcess()
    {
        return this._process_;
    }

    public void setProcess(PProcess node)
    {
        if(this._process_ != null)
        {
            this._process_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._process_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public PIndex getIndex()
    {
        return this._index_;
    }

    public void setIndex(PIndex node)
    {
        if(this._index_ != null)
        {
            this._index_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._index_ = node;
    }

    public TEq getEq()
    {
        return this._eq_;
    }

    public void setEq(TEq node)
    {
        if(this._eq_ != null)
        {
            this._eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eq_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._process_)
            + toString(this._dot_)
            + toString(this._index_)
            + toString(this._eq_)
            + toString(this._value_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._process_ == child)
        {
            this._process_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._index_ == child)
        {
            this._index_ = null;
            return;
        }

        if(this._eq_ == child)
        {
            this._eq_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._process_ == oldChild)
        {
            setProcess((PProcess) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._index_ == oldChild)
        {
            setIndex((PIndex) newChild);
            return;
        }

        if(this._eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
