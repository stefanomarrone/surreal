/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.modes.condition.parser;

import org.surreal.samgen.modes.condition.lexer.*;
import org.surreal.samgen.modes.condition.node.*;
import org.surreal.samgen.modes.condition.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PCondition node1 = (PCondition) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AComposedCondition */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASimpleCondition */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ANestedTerm */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AUnaryTerm */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ASimpleTerm */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ABinaryTerm */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAndopBinop */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AOropBinop */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce ALeftFirst */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AMetaFirst */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce ARightSecond */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AMetaSecond */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AOpAtomic */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce ASingletonAtomic */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ANeqOp */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AEqOp */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ALteqOp */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce ALtOp */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AGteqOp */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AGtOp */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce ASimpleLval */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce ANumRval */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AStrRval */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AIdModename */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
            case 24: /* reduce AIdProcess */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce AIdIndex */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce ANumNrval */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AIdCrval */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AComposedCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PTerm ptermNode2;
        PBinop pbinopNode3;
        PCondition pconditionNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        pbinopNode3 = (PBinop)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);

        pconditionNode1 = new AComposedCondition(ptermNode2, pbinopNode3, pconditionNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASimpleCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pconditionNode1 = new ASimpleCondition(ptermNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ANestedTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PTerm ptermNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new ANestedTerm(tlparNode2, ptermNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AUnaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNot tnotNode2;
        PTerm ptermNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AUnaryTerm(tnotNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASimpleTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PAtomic patomicNode2;
        patomicNode2 = (PAtomic)nodeArrayList1.get(0);

        ptermNode1 = new ASimpleTerm(patomicNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ABinaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PFirst pfirstNode3;
        PBinop pbinopNode4;
        PSecond psecondNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pfirstNode3 = (PFirst)nodeArrayList2.get(0);
        pbinopNode4 = (PBinop)nodeArrayList3.get(0);
        psecondNode5 = (PSecond)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        ptermNode1 = new ABinaryTerm(tlparNode2, pfirstNode3, pbinopNode4, psecondNode5, trparNode6);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAndopBinop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinop pbinopNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pbinopNode1 = new AAndopBinop(tandNode2);
        }
	nodeList.add(pbinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AOropBinop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinop pbinopNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pbinopNode1 = new AOropBinop(torNode2);
        }
	nodeList.add(pbinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ALeftFirst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFirst pfirstNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfirstNode1 = new ALeftFirst(ptermNode2);
        }
	nodeList.add(pfirstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMetaFirst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFirst pfirstNode1;
        {
            // Block
        TOpaqueexpr topaqueexprNode2;
        topaqueexprNode2 = (TOpaqueexpr)nodeArrayList1.get(0);

        pfirstNode1 = new AMetaFirst(topaqueexprNode2);
        }
	nodeList.add(pfirstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ARightSecond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecond psecondNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        psecondNode1 = new ARightSecond(ptermNode2);
        }
	nodeList.add(psecondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMetaSecond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecond psecondNode1;
        {
            // Block
        TOpaqueexpr topaqueexprNode2;
        topaqueexprNode2 = (TOpaqueexpr)nodeArrayList1.get(0);

        psecondNode1 = new AMetaSecond(topaqueexprNode2);
        }
	nodeList.add(psecondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AOpAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        PLval plvalNode2;
        POp popNode3;
        PRval prvalNode4;
        plvalNode2 = (PLval)nodeArrayList1.get(0);
        popNode3 = (POp)nodeArrayList2.get(0);
        prvalNode4 = (PRval)nodeArrayList3.get(0);

        patomicNode1 = new AOpAtomic(plvalNode2, popNode3, prvalNode4);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASingletonAtomic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        PModename pmodenameNode2;
        pmodenameNode2 = (PModename)nodeArrayList1.get(0);

        patomicNode1 = new ASingletonAtomic(pmodenameNode2);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANeqOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TNeq tneqNode2;
        tneqNode2 = (TNeq)nodeArrayList1.get(0);

        popNode1 = new ANeqOp(tneqNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AEqOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        popNode1 = new AEqOp(teqNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ALteqOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TLteq tlteqNode2;
        tlteqNode2 = (TLteq)nodeArrayList1.get(0);

        popNode1 = new ALteqOp(tlteqNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ALtOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        popNode1 = new ALtOp(tltNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AGteqOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TGteq tgteqNode2;
        tgteqNode2 = (TGteq)nodeArrayList1.get(0);

        popNode1 = new AGteqOp(tgteqNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AGtOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        popNode1 = new AGtOp(tgtNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASimpleLval */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLval plvalNode1;
        {
            // Block
        PProcess pprocessNode2;
        TDot tdotNode3;
        PIndex pindexNode4;
        pprocessNode2 = (PProcess)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pindexNode4 = (PIndex)nodeArrayList3.get(0);

        plvalNode1 = new ASimpleLval(pprocessNode2, tdotNode3, pindexNode4);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ANumRval */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRval prvalNode1;
        {
            // Block
        PNrval pnrvalNode2;
        pnrvalNode2 = (PNrval)nodeArrayList1.get(0);

        prvalNode1 = new ANumRval(pnrvalNode2);
        }
	nodeList.add(prvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AStrRval */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRval prvalNode1;
        {
            // Block
        PCrval pcrvalNode2;
        pcrvalNode2 = (PCrval)nodeArrayList1.get(0);

        prvalNode1 = new AStrRval(pcrvalNode2);
        }
	nodeList.add(prvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIdModename */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PModename pmodenameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pmodenameNode1 = new AIdModename(tidentifierNode2);
        }
	nodeList.add(pmodenameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIdProcess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProcess pprocessNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pprocessNode1 = new AIdProcess(tidentifierNode2);
        }
	nodeList.add(pprocessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIdIndex */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIndex pindexNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pindexNode1 = new AIdIndex(tidentifierNode2);
        }
	nodeList.add(pindexNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ANumNrval */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNrval pnrvalNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pnrvalNode1 = new ANumNrval(tnumberNode2);
        }
	nodeList.add(pnrvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdCrval */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCrval pcrvalNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pcrvalNode1 = new AIdCrval(tidentifierNode2);
        }
	nodeList.add(pcrvalNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {3, SHIFT, 2}, {12, SHIFT, 3}, },
			{{-1, REDUCE, 23}, {2, REDUCE, 24}, },
			{{-1, ERROR, 2}, {0, SHIFT, 1}, {3, SHIFT, 2}, {12, SHIFT, 3}, },
			{{-1, ERROR, 3}, {0, SHIFT, 1}, {3, SHIFT, 2}, {12, SHIFT, 3}, {14, SHIFT, 11}, },
			{{-1, ERROR, 4}, {15, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, {4, SHIFT, 14}, {5, SHIFT, 15}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 7}, {6, SHIFT, 17}, {7, SHIFT, 18}, {8, SHIFT, 19}, {9, SHIFT, 20}, {10, SHIFT, 21}, {11, SHIFT, 22}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 9}, {2, SHIFT, 24}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, {13, SHIFT, 25}, },
			{{-1, ERROR, 13}, {4, SHIFT, 14}, {5, SHIFT, 15}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 16}, {0, SHIFT, 1}, {3, SHIFT, 2}, {12, SHIFT, 3}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 23}, {0, SHIFT, 28}, {1, SHIFT, 29}, },
			{{-1, ERROR, 24}, {0, SHIFT, 33}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 26}, {0, SHIFT, 1}, {3, SHIFT, 2}, {12, SHIFT, 3}, {14, SHIFT, 35}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 37}, {13, SHIFT, 38}, },
			{{-1, REDUCE, 5}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, {16, 27}, },
			{{-1, 5}, {2, 10}, {3, 12}, {26, 36}, },
			{{-1, 16}, {13, 26}, },
			{{-1, 13}, },
			{{-1, 37}, },
			{{-1, 6}, },
			{{-1, 23}, },
			{{-1, 7}, },
			{{-1, 30}, },
			{{-1, 8}, },
			{{-1, 9}, },
			{{-1, 34}, },
			{{-1, 31}, },
			{{-1, 32}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: identifier, '!', '('",
			"expecting: '.', '|', '&', ')', EOF",
			"expecting: identifier, '!', '(', opaqueexpr",
			"expecting: EOF",
			"expecting: '|', '&', EOF",
			"expecting: '|', '&', ')', EOF",
			"expecting: '<', '>', '==', '!=', '<=', '>='",
			"expecting: '.'",
			"expecting: '|', '&'",
			"expecting: '|', '&', ')'",
			"expecting: identifier, number",
			"expecting: identifier",
			"expecting: ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 0, 2, 3, 4, 5, 6, 5, 7, 5, 8, 9, 8, 2, 2, 0, 10, 10, 10, 10, 10, 10, 10, 11, 5, 2, 3, 5, 5, 5, 5, 5, 6, 6, 12, 12, 12, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
