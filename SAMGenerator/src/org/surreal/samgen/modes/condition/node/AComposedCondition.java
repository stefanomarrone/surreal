/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.modes.condition.node;

import org.surreal.samgen.modes.condition.analysis.*;

@SuppressWarnings("nls")
public final class AComposedCondition extends PCondition
{
    private PTerm _term_;
    private PBinop _binop_;
    private PCondition _condition_;

    public AComposedCondition()
    {
        // Constructor
    }

    public AComposedCondition(
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") PBinop _binop_,
        @SuppressWarnings("hiding") PCondition _condition_)
    {
        // Constructor
        setTerm(_term_);

        setBinop(_binop_);

        setCondition(_condition_);

    }

    @Override
    public Object clone()
    {
        return new AComposedCondition(
            cloneNode(this._term_),
            cloneNode(this._binop_),
            cloneNode(this._condition_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComposedCondition(this);
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public PBinop getBinop()
    {
        return this._binop_;
    }

    public void setBinop(PBinop node)
    {
        if(this._binop_ != null)
        {
            this._binop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._binop_ = node;
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._term_)
            + toString(this._binop_)
            + toString(this._condition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._binop_ == child)
        {
            this._binop_ = null;
            return;
        }

        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(this._binop_ == oldChild)
        {
            setBinop((PBinop) newChild);
            return;
        }

        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
