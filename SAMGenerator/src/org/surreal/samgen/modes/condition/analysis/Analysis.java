/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.modes.condition.analysis;

import org.surreal.samgen.modes.condition.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAComposedCondition(AComposedCondition node);
    void caseASimpleCondition(ASimpleCondition node);
    void caseANestedTerm(ANestedTerm node);
    void caseAUnaryTerm(AUnaryTerm node);
    void caseASimpleTerm(ASimpleTerm node);
    void caseABinaryTerm(ABinaryTerm node);
    void caseAAndopBinop(AAndopBinop node);
    void caseAOropBinop(AOropBinop node);
    void caseALeftFirst(ALeftFirst node);
    void caseAMetaFirst(AMetaFirst node);
    void caseARightSecond(ARightSecond node);
    void caseAMetaSecond(AMetaSecond node);
    void caseAOpAtomic(AOpAtomic node);
    void caseASingletonAtomic(ASingletonAtomic node);
    void caseANeqOp(ANeqOp node);
    void caseAEqOp(AEqOp node);
    void caseALteqOp(ALteqOp node);
    void caseALtOp(ALtOp node);
    void caseAGteqOp(AGteqOp node);
    void caseAGtOp(AGtOp node);
    void caseASimpleLval(ASimpleLval node);
    void caseANumRval(ANumRval node);
    void caseAStrRval(AStrRval node);
    void caseAIdModename(AIdModename node);
    void caseAIdProcess(AIdProcess node);
    void caseAIdIndex(AIdIndex node);
    void caseANumNrval(ANumNrval node);
    void caseAIdCrval(AIdCrval node);

    void caseTSpaces(TSpaces node);
    void caseTSpace(TSpace node);
    void caseTIdentifier(TIdentifier node);
    void caseTNumber(TNumber node);
    void caseTDot(TDot node);
    void caseTNot(TNot node);
    void caseTOr(TOr node);
    void caseTAnd(TAnd node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTOpaqueexpr(TOpaqueexpr node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
