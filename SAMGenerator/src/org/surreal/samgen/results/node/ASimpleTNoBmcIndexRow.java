/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.results.node;

import org.surreal.samgen.results.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleTNoBmcIndexRow extends PTNoBmcIndexRow
{
    private TTkNoBound _tkNoBound_;
    private PBound _bound_;

    public ASimpleTNoBmcIndexRow()
    {
        // Constructor
    }

    public ASimpleTNoBmcIndexRow(
        @SuppressWarnings("hiding") TTkNoBound _tkNoBound_,
        @SuppressWarnings("hiding") PBound _bound_)
    {
        // Constructor
        setTkNoBound(_tkNoBound_);

        setBound(_bound_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleTNoBmcIndexRow(
            cloneNode(this._tkNoBound_),
            cloneNode(this._bound_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleTNoBmcIndexRow(this);
    }

    public TTkNoBound getTkNoBound()
    {
        return this._tkNoBound_;
    }

    public void setTkNoBound(TTkNoBound node)
    {
        if(this._tkNoBound_ != null)
        {
            this._tkNoBound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkNoBound_ = node;
    }

    public PBound getBound()
    {
        return this._bound_;
    }

    public void setBound(PBound node)
    {
        if(this._bound_ != null)
        {
            this._bound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bound_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tkNoBound_)
            + toString(this._bound_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tkNoBound_ == child)
        {
            this._tkNoBound_ = null;
            return;
        }

        if(this._bound_ == child)
        {
            this._bound_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tkNoBound_ == oldChild)
        {
            setTkNoBound((TTkNoBound) newChild);
            return;
        }

        if(this._bound_ == oldChild)
        {
            setBound((PBound) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
