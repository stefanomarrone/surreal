/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.results.analysis;

import java.util.*;
import org.surreal.samgen.results.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPResult().apply(this);
        outStart(node);
    }

    public void inANoctrResult(ANoctrResult node)
    {
        defaultIn(node);
    }

    public void outANoctrResult(ANoctrResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoctrResult(ANoctrResult node)
    {
        inANoctrResult(node);
        if(node.getTfrow() != null)
        {
            node.getTfrow().apply(this);
        }
        outANoctrResult(node);
    }

    public void inACtrResult(ACtrResult node)
    {
        defaultIn(node);
    }

    public void outACtrResult(ACtrResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACtrResult(ACtrResult node)
    {
        inACtrResult(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getTokHrow() != null)
        {
            node.getTokHrow().apply(this);
        }
        if(node.getTokTrow() != null)
        {
            node.getTokTrow().apply(this);
        }
        if(node.getTokSrow() != null)
        {
            node.getTokSrow().apply(this);
        }
        if(node.getFfrow() != null)
        {
            node.getFfrow().apply(this);
        }
        outACtrResult(node);
    }

    public void inABmcResult(ABmcResult node)
    {
        defaultIn(node);
    }

    public void outABmcResult(ABmcResult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABmcResult(ABmcResult node)
    {
        inABmcResult(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getTokHrow() != null)
        {
            node.getTokHrow().apply(this);
        }
        if(node.getTokBmcTrow() != null)
        {
            node.getTokBmcTrow().apply(this);
        }
        if(node.getTokSrow() != null)
        {
            node.getTokSrow().apply(this);
        }
        if(node.getFbrow() != null)
        {
            node.getFbrow().apply(this);
        }
        outABmcResult(node);
    }

    public void inASimpleTNoBmcIndexRow(ASimpleTNoBmcIndexRow node)
    {
        defaultIn(node);
    }

    public void outASimpleTNoBmcIndexRow(ASimpleTNoBmcIndexRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTNoBmcIndexRow(ASimpleTNoBmcIndexRow node)
    {
        inASimpleTNoBmcIndexRow(node);
        if(node.getBound() != null)
        {
            node.getBound().apply(this);
        }
        if(node.getTkNoBound() != null)
        {
            node.getTkNoBound().apply(this);
        }
        outASimpleTNoBmcIndexRow(node);
    }

    public void inASimpleTfrow(ASimpleTfrow node)
    {
        defaultIn(node);
    }

    public void outASimpleTfrow(ASimpleTfrow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTfrow(ASimpleTfrow node)
    {
        inASimpleTfrow(node);
        if(node.getBoolTrue() != null)
        {
            node.getBoolTrue().apply(this);
        }
        if(node.getTokFrowRight() != null)
        {
            node.getTokFrowRight().apply(this);
        }
        if(node.getTrgmode() != null)
        {
            node.getTrgmode().apply(this);
        }
        if(node.getTokFrowMiddle() != null)
        {
            node.getTokFrowMiddle().apply(this);
        }
        if(node.getSrcmode() != null)
        {
            node.getSrcmode().apply(this);
        }
        if(node.getTokFrowLeft() != null)
        {
            node.getTokFrowLeft().apply(this);
        }
        outASimpleTfrow(node);
    }

    public void inASimpleFfrow(ASimpleFfrow node)
    {
        defaultIn(node);
    }

    public void outASimpleFfrow(ASimpleFfrow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFfrow(ASimpleFfrow node)
    {
        inASimpleFfrow(node);
        if(node.getBoolFalse() != null)
        {
            node.getBoolFalse().apply(this);
        }
        if(node.getTokFrowRight() != null)
        {
            node.getTokFrowRight().apply(this);
        }
        if(node.getTrgmode() != null)
        {
            node.getTrgmode().apply(this);
        }
        if(node.getTokFrowMiddle() != null)
        {
            node.getTokFrowMiddle().apply(this);
        }
        if(node.getSrcmode() != null)
        {
            node.getSrcmode().apply(this);
        }
        if(node.getTokFrowLeft() != null)
        {
            node.getTokFrowLeft().apply(this);
        }
        outASimpleFfrow(node);
    }

    public void inASimpleFbrow(ASimpleFbrow node)
    {
        defaultIn(node);
    }

    public void outASimpleFbrow(ASimpleFbrow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFbrow(ASimpleFbrow node)
    {
        inASimpleFbrow(node);
        if(node.getBoolFalse() != null)
        {
            node.getBoolFalse().apply(this);
        }
        if(node.getTokFrowRight() != null)
        {
            node.getTokFrowRight().apply(this);
        }
        if(node.getTrgmode() != null)
        {
            node.getTrgmode().apply(this);
        }
        if(node.getTokFrowBmcMiddle() != null)
        {
            node.getTokFrowBmcMiddle().apply(this);
        }
        if(node.getSrcmode() != null)
        {
            node.getSrcmode().apply(this);
        }
        if(node.getTokFrowBmcLeft() != null)
        {
            node.getTokFrowBmcLeft().apply(this);
        }
        outASimpleFbrow(node);
    }

    public void inASimpleBody(ASimpleBody node)
    {
        defaultIn(node);
    }

    public void outASimpleBody(ASimpleBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleBody(ASimpleBody node)
    {
        inASimpleBody(node);
        if(node.getStatebody() != null)
        {
            node.getStatebody().apply(this);
        }
        outASimpleBody(node);
    }

    public void inAConcatBody(AConcatBody node)
    {
        defaultIn(node);
    }

    public void outAConcatBody(AConcatBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatBody(AConcatBody node)
    {
        inAConcatBody(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getStatebody() != null)
        {
            node.getStatebody().apply(this);
        }
        outAConcatBody(node);
    }

    public void inAHeaderStatebody(AHeaderStatebody node)
    {
        defaultIn(node);
    }

    public void outAHeaderStatebody(AHeaderStatebody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderStatebody(AHeaderStatebody node)
    {
        inAHeaderStatebody(node);
        if(node.getSteps() != null)
        {
            node.getSteps().apply(this);
        }
        if(node.getStateheader() != null)
        {
            node.getStateheader().apply(this);
        }
        outAHeaderStatebody(node);
    }

    public void inAHeaderStateheader(AHeaderStateheader node)
    {
        defaultIn(node);
    }

    public void outAHeaderStateheader(AHeaderStateheader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderStateheader(AHeaderStateheader node)
    {
        inAHeaderStateheader(node);
        if(node.getTokStateRight() != null)
        {
            node.getTokStateRight().apply(this);
        }
        if(node.getSid() != null)
        {
            node.getSid().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFid() != null)
        {
            node.getFid().apply(this);
        }
        if(node.getTokStateLeft() != null)
        {
            node.getTokStateLeft().apply(this);
        }
        outAHeaderStateheader(node);
    }

    public void inASimpleSteps(ASimpleSteps node)
    {
        defaultIn(node);
    }

    public void outASimpleSteps(ASimpleSteps node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSteps(ASimpleSteps node)
    {
        inASimpleSteps(node);
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        outASimpleSteps(node);
    }

    public void inAConcatSteps(AConcatSteps node)
    {
        defaultIn(node);
    }

    public void outAConcatSteps(AConcatSteps node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatSteps(AConcatSteps node)
    {
        inAConcatSteps(node);
        if(node.getSteps() != null)
        {
            node.getSteps().apply(this);
        }
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        outAConcatSteps(node);
    }

    public void inAEventStep(AEventStep node)
    {
        defaultIn(node);
    }

    public void outAEventStep(AEventStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventStep(AEventStep node)
    {
        inAEventStep(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getGlobalname() != null)
        {
            node.getGlobalname().apply(this);
        }
        outAEventStep(node);
    }

    public void inAIndexStep(AIndexStep node)
    {
        defaultIn(node);
    }

    public void outAIndexStep(AIndexStep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexStep(AIndexStep node)
    {
        inAIndexStep(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getProcess() != null)
        {
            node.getProcess().apply(this);
        }
        outAIndexStep(node);
    }

    public void inANumValue(ANumValue node)
    {
        defaultIn(node);
    }

    public void outANumValue(ANumValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumValue(ANumValue node)
    {
        inANumValue(node);
        if(node.getNrval() != null)
        {
            node.getNrval().apply(this);
        }
        outANumValue(node);
    }

    public void inAStrValue(AStrValue node)
    {
        defaultIn(node);
    }

    public void outAStrValue(AStrValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrValue(AStrValue node)
    {
        inAStrValue(node);
        if(node.getCrval() != null)
        {
            node.getCrval().apply(this);
        }
        outAStrValue(node);
    }

    public void inAIdLabel(AIdLabel node)
    {
        defaultIn(node);
    }

    public void outAIdLabel(AIdLabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLabel(AIdLabel node)
    {
        inAIdLabel(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdLabel(node);
    }

    public void inAIdGlobalname(AIdGlobalname node)
    {
        defaultIn(node);
    }

    public void outAIdGlobalname(AIdGlobalname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdGlobalname(AIdGlobalname node)
    {
        inAIdGlobalname(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdGlobalname(node);
    }

    public void inAIdProcess(AIdProcess node)
    {
        defaultIn(node);
    }

    public void outAIdProcess(AIdProcess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdProcess(AIdProcess node)
    {
        inAIdProcess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdProcess(node);
    }

    public void inAIdIndex(AIdIndex node)
    {
        defaultIn(node);
    }

    public void outAIdIndex(AIdIndex node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIndex(AIdIndex node)
    {
        inAIdIndex(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdIndex(node);
    }

    public void inANumNrval(ANumNrval node)
    {
        defaultIn(node);
    }

    public void outANumNrval(ANumNrval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumNrval(ANumNrval node)
    {
        inANumNrval(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumNrval(node);
    }

    public void inAIdCrval(AIdCrval node)
    {
        defaultIn(node);
    }

    public void outAIdCrval(AIdCrval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdCrval(AIdCrval node)
    {
        inAIdCrval(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdCrval(node);
    }

    public void inANumFid(ANumFid node)
    {
        defaultIn(node);
    }

    public void outANumFid(ANumFid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFid(ANumFid node)
    {
        inANumFid(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumFid(node);
    }

    public void inANumSid(ANumSid node)
    {
        defaultIn(node);
    }

    public void outANumSid(ANumSid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumSid(ANumSid node)
    {
        inANumSid(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumSid(node);
    }

    public void inAIdSrcmode(AIdSrcmode node)
    {
        defaultIn(node);
    }

    public void outAIdSrcmode(AIdSrcmode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdSrcmode(AIdSrcmode node)
    {
        inAIdSrcmode(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdSrcmode(node);
    }

    public void inAIdTrgmode(AIdTrgmode node)
    {
        defaultIn(node);
    }

    public void outAIdTrgmode(AIdTrgmode node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdTrgmode(AIdTrgmode node)
    {
        inAIdTrgmode(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdTrgmode(node);
    }

    public void inANumBound(ANumBound node)
    {
        defaultIn(node);
    }

    public void outANumBound(ANumBound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumBound(ANumBound node)
    {
        inANumBound(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumBound(node);
    }
}
