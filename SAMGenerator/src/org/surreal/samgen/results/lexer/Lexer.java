/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.surreal.samgen.results.lexer;

import java.io.*;
import org.surreal.samgen.results.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSpaces(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSpace(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEq(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolFalse(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolTrue(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokFrowLeft(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokFrowBmcLeft(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokFrowMiddle(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokFrowBmcMiddle(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokFrowRight(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokSrow(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokTrow(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokBmcTrow(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokHrow(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTkNoBound(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokStateLeft(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokStateRight(line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpaqueexpr(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {11, 11, 3}, {13, 13, 4}, {32, 32, 5}, {35, 35, 6}, {41, 41, 7}, {45, 45, 8}, {46, 46, 9}, {48, 57, 10}, {61, 61, 11}, {65, 83, 12}, {84, 84, 13}, {85, 90, 12}, {97, 104, 12}, {105, 105, 14}, {106, 122, 12}, },
            {{9, 13, -2}, },
            {{9, 11, -2}, {13, 13, 15}, },
            {{9, 13, -2}, },
            {{9, 13, -2}, },
            {{32, 32, 16}, {60, 60, 17}, },
            {{0, 34, 18}, {35, 35, 19}, {36, 65535, 18}, },
            {},
            {{45, 45, 20}, {62, 62, 21}, },
            {},
            {{48, 57, 10}, },
            {},
            {{48, 57, 22}, {65, 90, 23}, {95, 95, 23}, {97, 122, 23}, },
            {{48, 95, -14}, {97, 113, 23}, {114, 114, 24}, {115, 122, 23}, },
            {{48, 95, -14}, {97, 114, 23}, {115, 115, 25}, {116, 122, 23}, },
            {{9, 13, -2}, },
            {{32, 32, 16}, },
            {{45, 45, 26}, },
            {{0, 65535, -8}, },
            {},
            {{32, 32, 27}, },
            {{32, 32, 28}, },
            {{48, 122, -14}, },
            {{48, 122, -14}, },
            {{48, 95, -14}, {97, 97, 29}, {98, 122, 23}, },
            {{32, 32, 30}, {48, 122, -14}, },
            {},
            {{97, 97, 31}, {110, 110, 32}, {115, 115, 33}, },
            {{32, 32, 34}, {65, 65, 35}, {83, 83, 36}, },
            {{48, 95, -14}, {97, 98, 23}, {99, 99, 37}, {100, 122, 23}, },
            {{102, 102, 38}, {116, 116, 39}, },
            {{115, 115, 40}, },
            {{111, 111, 41}, },
            {{112, 112, 42}, },
            {{88, 88, 43}, },
            {{88, 88, 44}, },
            {{116, 116, 45}, },
            {{48, 95, -14}, {97, 100, 23}, {101, 101, 46}, {102, 122, 23}, },
            {{97, 97, 47}, },
            {{114, 114, 48}, },
            {{32, 32, 49}, },
            {{32, 32, 50}, },
            {{101, 101, 51}, },
            {{32, 32, 52}, },
            {{32, 32, 53}, },
            {{97, 97, 54}, },
            {{32, 32, 55}, {48, 122, -14}, },
            {{108, 108, 56}, },
            {{117, 117, 57}, },
            {{100, 100, 58}, },
            {{99, 99, 59}, },
            {{99, 99, 60}, },
            {{33, 33, 61}, },
            {{33, 33, 62}, },
            {{116, 116, 63}, },
            {{68, 68, 64}, {84, 84, 65}, },
            {{115, 115, 66}, },
            {{101, 101, 67}, },
            {{101, 101, 68}, },
            {{111, 111, 69}, },
            {{105, 105, 70}, },
            {},
            {},
            {{101, 101, 71}, },
            {{101, 101, 72}, },
            {{121, 121, 73}, },
            {{101, 101, 74}, },
            {},
            {{109, 109, 75}, },
            {{117, 117, 76}, },
            {{102, 102, 77}, },
            {{58, 58, 78}, },
            {{115, 115, 79}, },
            {{112, 112, 80}, },
            {},
            {{111, 111, 81}, },
            {{110, 110, 82}, },
            {{105, 105, 83}, },
            {{32, 32, 84}, },
            {{99, 99, 85}, },
            {{101, 101, 86}, },
            {{110, 110, 87}, },
            {{116, 116, 88}, },
            {{99, 99, 89}, },
            {},
            {{114, 114, 90}, },
            {{58, 58, 91}, },
            {{115, 115, 92}, },
            {{101, 101, 93}, },
            {{97, 97, 94}, },
            {{105, 105, 95}, },
            {{32, 32, 96}, },
            {{116, 116, 97}, },
            {{114, 114, 98}, },
            {{116, 116, 99}, },
            {{112, 112, 100}, },
            {{67, 67, 101}, },
            {{114, 114, 102}, },
            {{101, 101, 103}, },
            {{105, 105, 104}, },
            {{116, 116, 105}, },
            {{111, 111, 106}, },
            {{97, 97, 107}, },
            {{120, 120, 108}, },
            {{111, 111, 109}, },
            {{105, 105, 110}, },
            {{117, 117, 111}, },
            {{116, 116, 112}, },
            {{97, 97, 113}, },
            {{110, 110, 114}, },
            {{111, 111, 115}, },
            {{110, 110, 116}, },
            {{101, 101, 117}, },
            {{109, 109, 118}, },
            {{32, 32, 119}, },
            {{110, 110, 120}, },
            {{116, 116, 121}, },
            {{100, 100, 122}, },
            {{112, 112, 123}, },
            {{32, 32, 124}, {65, 65, 125}, },
            {{58, 58, 126}, },
            {{101, 101, 127}, },
            {{32, 32, 128}, },
            {{108, 108, 129}, },
            {{71, 71, 130}, },
            {{71, 71, 131}, },
            {{32, 32, 132}, },
            {{114, 114, 133}, },
            {{98, 98, 134}, },
            {{101, 101, 135}, },
            {{32, 32, 136}, },
            {{32, 32, 137}, },
            {{66, 66, 138}, {67, 67, 139}, },
            {{101, 101, 140}, },
            {{121, 121, 141}, },
            {{32, 32, 142}, },
            {{40, 40, 143}, },
            {{40, 40, 144}, },
            {{77, 77, 145}, },
            {{84, 84, 146}, },
            {{120, 120, 147}, },
            {{32, 32, 148}, },
            {{102, 102, 149}, },
            {},
            {},
            {{67, 67, 150}, },
            {{76, 76, 151}, },
            {{97, 97, 152}, },
            {{116, 116, 153}, },
            {{111, 111, 154}, },
            {{32, 32, 155}, },
            {{32, 32, 156}, },
            {{109, 109, 157}, },
            {{104, 104, 158}, },
            {{117, 117, 159}, },
            {{67, 67, 160}, },
            {{67, 67, 161}, },
            {{112, 112, 162}, },
            {{101, 101, 163}, },
            {{110, 110, 164}, },
            {{111, 111, 165}, },
            {{111, 111, 166}, },
            {{108, 108, 167}, },
            {{32, 32, 168}, },
            {{100, 100, 169}, },
            {{117, 117, 170}, },
            {{117, 117, 171}, },
            {{101, 101, 172}, },
            {{102, 102, 173}, },
            {{32, 32, 174}, },
            {{110, 110, 175}, },
            {{110, 110, 176}, },
            {},
            {{111, 111, 177}, },
            {{119, 119, 178}, },
            {{116, 116, 179}, },
            {{116, 116, 180}, },
            {{108, 108, 181}, },
            {{105, 105, 182}, },
            {{101, 101, 183}, },
            {{101, 101, 184}, },
            {{108, 108, 185}, },
            {{116, 116, 186}, },
            {{114, 114, 187}, },
            {{114, 114, 188}, },
            {{111, 111, 189}, },
            {{104, 104, 190}, },
            {{101, 101, 191}, },
            {{101, 101, 192}, },
            {{119, 119, 193}, },
            {{32, 32, 194}, },
            {{120, 120, 195}, },
            {{120, 120, 196}, },
            {{105, 105, 197}, },
            {{98, 98, 198}, },
            {{97, 97, 199}, },
            {{97, 97, 200}, },
            {{110, 110, 201}, },
            {{111, 111, 202}, },
            {{109, 109, 203}, },
            {{109, 109, 204}, },
            {{103, 103, 205}, },
            {{117, 117, 206}, },
            {{112, 112, 207}, },
            {{112, 112, 208}, },
            {{32, 32, 209}, },
            {{110, 110, 210}, },
            {{108, 108, 211}, },
            {{108, 108, 212}, },
            {{101, 101, 213}, },
            {{100, 100, 214}, },
            {{101, 101, 215}, },
            {{101, 101, 216}, },
            {{120, 120, 217}, },
            {},
            {},
            {},
            {{101, 101, 218}, },
            {{99, 99, 219}, },
            {{117, 117, 220}, },
            {{116, 116, 221}, },
            {{105, 105, 222}, },
            {{111, 111, 223}, },
            {{110, 110, 224}, },
            {{32, 32, 225}, },
            {{115, 115, 226}, },
            {{101, 101, 227}, },
            {{113, 113, 228}, },
            {{117, 117, 229}, },
            {{101, 101, 230}, },
            {{110, 110, 231}, },
            {{99, 99, 232}, },
            {{101, 101, 233}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {3, 0, 0, 0, 0, 1, -1, 12, -1, 4, 3, 5, 2, 2, 2, 0, 1, -1, -1, 20, -1, -1, 2, 2, 2, 2, 19, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 15, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
